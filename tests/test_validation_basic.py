"""
–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
"""

import sys
from pathlib import Path
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.utils.validation import (
    validate_json, 
    validate_graph_invariants, 
    validate_concept_dictionary_invariants,
    ValidationError, 
    GraphInvariantError,
    _load_schema
)


def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –∏ —Å—Ö–µ–º."""
    
    print("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ===")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—ã
    try:
        concept_schema = _load_schema("ConceptDictionary")
        print("‚úÖ ConceptDictionary.schema.json –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(concept_schema.keys())}")
    except Exception as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ConceptDictionary.schema.json: {e}")
    
    try:
        graph_schema = _load_schema("LearningChunkGraph")
        print("‚úÖ LearningChunkGraph.schema.json –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(graph_schema.keys())}")
    except Exception as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ LearningChunkGraph.schema.json: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ConceptDictionary
        valid_concept_dict = {
            "concepts": [
                {
                    "concept_id": "test_concept_1",
                    "term": {
                        "primary": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ü–µ–ø—Ç"
                    },
                    "definition": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
                }
            ]
        }
        
        validate_json(valid_concept_dict, "ConceptDictionary")
        validate_concept_dictionary_invariants(valid_concept_dict)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è ConceptDictionary –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ConceptDictionary: {e}")
    
    try:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π LearningChunkGraph
        valid_graph = {
            "nodes": [
                {
                    "id": "test_chunk_1",
                    "type": "Chunk",
                    "text": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞",
                    "local_start": 0,
                    "difficulty": 3
                }
            ],
            "edges": []
        }
        
        validate_json(valid_graph, "LearningChunkGraph")
        validate_graph_invariants(valid_graph)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è LearningChunkGraph –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ LearningChunkGraph: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    try:
        invalid_graph = {
            "nodes": [
                {
                    "id": "test_chunk_1",
                    "type": "Chunk",
                    "text": "–¢–µ—Å—Ç",
                    "local_start": 0,
                    "difficulty": 1
                }
            ],
            "edges": [
                {
                    "source": "test_chunk_1",
                    "target": "test_chunk_1",
                    "type": "PREREQUISITE"  # Self-loop –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω
                }
            ]
        }
        
        validate_graph_invariants(invalid_graph)
        pytest.fail("–ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª PREREQUISITE self-loop")
        
    except GraphInvariantError as e:
        if "self-loop" in str(e):
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–ª PREREQUISITE self-loop")
        else:
            pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ - –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ


if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑—É–µ–º pytest
    import pytest
    sys.exit(pytest.main([__file__, "-v"]))
