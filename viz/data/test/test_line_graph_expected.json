{
  "nodes": [
    {
      "id": "A",
      "type": "Chunk",
      "text": "Node A: Start of linear chain",
      "node_offset": 0,
      "definition": "Starting node with no incoming edges",
      "difficulty": 1,
      "degree_in": 0,
      "degree_out": 1,
      "degree_centrality": 0.3333,
      "pagerank": 0.0375,
      "betweenness_centrality": 0.0,
      "closeness_centrality": 0.5
    },
    {
      "id": "B",
      "type": "Chunk",
      "text": "Node B: First middle node",
      "node_offset": 100,
      "definition": "First intermediate node in the chain",
      "difficulty": 2,
      "degree_in": 1,
      "degree_out": 1,
      "degree_centrality": 0.6667,
      "pagerank": 0.0694,
      "betweenness_centrality": 0.3333,
      "closeness_centrality": 0.4444
    },
    {
      "id": "C",
      "type": "Chunk",
      "text": "Node C: Second middle node",
      "node_offset": 200,
      "definition": "Second intermediate node in the chain",
      "difficulty": 3,
      "degree_in": 1,
      "degree_out": 1,
      "degree_centrality": 0.6667,
      "pagerank": 0.1419,
      "betweenness_centrality": 0.3333,
      "closeness_centrality": 0.3333
    },
    {
      "id": "D",
      "type": "Chunk",
      "text": "Node D: End of linear chain",
      "node_offset": 300,
      "definition": "Terminal node with no outgoing edges",
      "difficulty": 4,
      "degree_in": 1,
      "degree_out": 0,
      "degree_centrality": 0.3333,
      "pagerank": 0.7512,
      "betweenness_centrality": 0.0,
      "closeness_centrality": 0.0
    }
  ],
  "edges": [
    {
      "source": "A",
      "target": "B",
      "type": "PREREQUISITE",
      "weight": 1.0,
      "conditions": "A must be understood before B",
      "inverse_weight": 1.0
    },
    {
      "source": "B",
      "target": "C",
      "type": "PREREQUISITE",
      "weight": 1.0,
      "conditions": "B must be understood before C",
      "inverse_weight": 1.0
    },
    {
      "source": "C",
      "target": "D",
      "type": "PREREQUISITE",
      "weight": 1.0,
      "conditions": "C must be understood before D",
      "inverse_weight": 1.0
    }
  ],
  "_meta": {
    "test_name": "Linear Graph Test",
    "description": "Simple directed linear chain A→B→C→D for testing flow-based metrics",
    "expected_properties": {
      "pagerank_flow": "Should increase towards the end (D has maximum)",
      "betweenness": "Middle nodes (B,C) should have equal non-zero betweenness",
      "closeness": "Should decrease along the chain",
      "components": "Single weakly connected component"
    }
  }
}